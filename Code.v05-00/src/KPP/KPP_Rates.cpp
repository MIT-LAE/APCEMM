/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* The Reaction Rates File                                          */
/*                                                                  */
/* Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  */
/*       (http://www.cs.vt.edu/~asandu/Software/KPP)                */
/* KPP is distributed under GPL, the general public licence         */
/*       (http://www.gnu.org/copyleft/gpl.html)                     */
/* (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           */
/* (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            */
/*     With important contributions from:                           */
/*        M. Damian, Villanova University, USA                      */
/*        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany */
/*                                                                  */
/* File                 : KPP_Rates.c                               */
/* Time                 : Thu Jul 12 17:10:08 2018                  */
/* Equation file        : KPP.kpp                                   */
/* Output root filename : KPP                                       */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

#include "KPP/KPP_Parameters.h"
#include "KPP/KPP_Global.h"
#include "KPP/KPP_Sparse.h"
#include "KPP/KPP.hpp"

#define MAX(a, b) \
    ({ __typeof__ (a) _a = (a); \
        __typeof__ (b) _b = (b); \
      _a > _b ? _a : _b; })

/* Begin Rate Law Functions from KPP_HOME/util/UserRateLaws         */

/*  User-defined Rate Law functions
    Note: the default argument type for rate laws, as read from the equations file, is single precision
         but all the internal calculations are performed in double precision
*/

/* End Rate Law Functions from KPP_HOME/util/UserRateLaws           */


/* Begin INLINED Rate Law Functions                                 */


double GCARR( float A0, float B0, float C0, double TEMP )
{

    /* Arrhenius reaction rate */

    double ARR_RES;

    ARR_RES = (double)A0 * pow( (300.0/TEMP), (double)B0 ) * exp( (double)C0/TEMP );

    return ARR_RES;
}

double GCJPLPR( float A0, float B0, float C0, float A1, float B1, float C1, float FV, float FCT1, float FCT2, double AIRDENS, double TEMP )
{

    /* Pressure-dependent effects
     * Coefficients A0, B0, C0 are the Arrhenius parameters for the lower-limit rate
     * A1, B1, C1 are the upper-limit parameters. 
     * FV is the falloff curve parameter (Atkinson et al., 1992) */

    double JPLPR_RES;
    double K0, KINF;
    double FCT, XYRAT, BLOG, FEXP;

    K0   = GCARR( (double)A0, (double)B0, (double)C0, TEMP ) * AIRDENS;
    KINF = GCARR( (double)A1, (double)B1, (double)C1, TEMP );

    if ( FCT2 != 0 ) {
        FCT = exp( -TEMP / (double)FCT1 ) + exp( -(double)FCT2 / TEMP );
        XYRAT = K0/KINF;
        BLOG = log10(XYRAT);
        FEXP = 1.0E+00 / (1.0E+00 + BLOG * BLOG );
        JPLPR_RES = K0*pow( FCT, FEXP )/(1.0E+00+XYRAT);
    } else if ( FCT1 != 0 ) {
        FCT = exp( -TEMP / (double)FCT1 );
        XYRAT = K0/KINF;
        BLOG = log10(XYRAT);
        FEXP = 1.0E+00 / (1.0E+00 + BLOG * BLOG );
        JPLPR_RES = K0*pow( FCT, FEXP )/(1.0E+00 + XYRAT);
    } else {
        XYRAT = K0/KINF;
        BLOG = log10(XYRAT);
        FEXP = 1.0E+00 / (1.0E+00 + BLOG * BLOG );
        JPLPR_RES = K0*pow( (double)FV, FEXP)/(1.0E+00 + XYRAT);
    }

    return JPLPR_RES;
}


double GCJPLEQ( float A0, float B0, float C0, float A1, float B1, float C1, float A2, float B2, float C2, float FV, float FCT1, float FCT2, double AIRDENS, double TEMP )
{

    /* Function calculates the rate constant of the forward reaction
     * calculates the equilibrium constant
     * Find the backwards reaction by K = k_f/k_b */

    double JPLEQ_RES;
    double K0, K1;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    K1 = GCJPLPR( (double)A1, (double)B1, (double)C1, (double)A2, (double)B2, (double)C2, (double)FV, (double)FCT1, (double)FCT2, AIRDENS, TEMP );
    JPLEQ_RES = K1 / K0;

    return JPLEQ_RES;
}


double GC_TBRANCH( float A0, float B0, float C0, float A1, float B1, float C1, double TEMP )
{

    /* Temperature dependent branching ratio */

    double TBRANCH_RES;
    double K0, K1;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    K1 = GCARR( (double)A1, (double)B1, (double)C1, TEMP );
    
    TBRANCH_RES = K0/(1.0 + K1);
    
    return TBRANCH_RES;
}


double GC_HO2NO3( float A0, float B0, float C0, float A1, float B1, float C1, double AIRDENS, double TEMP, double H2O )
{

    /* */

    double HO2NO3_RES;
    double K0, K1;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    K1 = GCARR( (double)A1, (double)B1, (double)C1, TEMP );
    
    HO2NO3_RES = (K0 + K1*AIRDENS)*(1.0E+00 + 1.4E-21*H2O*exp(2200.0/TEMP));
    
    return HO2NO3_RES;
}


double GC_DMSOH( float A0, float B0, float C0, float A1, float B1, float C1, double AIRDENS, double TEMP )
{

    /* DMS + OH + HO2 */

    double DMSOH_RES;
    double K0, K1;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    K1 = GCARR( (double)A1, (double)B1, (double)C1, TEMP );
    
    DMSOH_RES = (K0*AIRDENS*0.2095E+00)/(1.00E+00 + K1*0.2095E+00);
    
    return DMSOH_RES;
}


double GC_RO2HO2( float A0, float B0, float C0, float A1, float B1, float C1, double TEMP )
{

    /* Carbon dependence of RO2 + HO2 */

    double RO2HO2_RES;
    double K0, K1;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    K1 = GCARR( (double)A1, (double)B1, (double)C1, TEMP );

    RO2HO2_RES = K0*(1.00E+00 - exp(-0.245E+00*K1));

    return RO2HO2_RES;
}


double GC_GLYXNO3( float A0, float B0, float C0, double AIRDENS, double TEMP )
{

    /*  */

    double GLYXNO3_RES;
    double K0;
    double OXY;

    OXY = 0.2095E+00*AIRDENS;
    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    GLYXNO3_RES = K0*(OXY + 3.5E+18)/(2.0E+00*OXY + 3.5E+18);

    return GLYXNO3_RES;
}


double GC_OHHNO3( float A0, float B0, float C0, float A1, float B1, float C1, float A2, float B2, float C2, double AIRDENS, double TEMP )
{

    /*  OH + HNO3:   K = K0 + K3[M] / (1 + K3[M]/K2) */

    double OHHNO3_RES;
    double K0, K1, K2;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    K1 = GCARR( (double)A1, (double)B1, (double)C1, TEMP );
    K2 = AIRDENS * GCARR( (double)A2, (double)B2, (double)C2, TEMP );

    OHHNO3_RES = K0 + K2/(1.0E+00 + K2/K1);

    return OHHNO3_RES;
}

double GC_GLYCOHA( float A0, float B0, float C0, double TEMP )
{

    /* */

    double GLYCOHA_RES;
    double K0;
    double GLYC_FRAC;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    GLYC_FRAC = 1.0E+00 - 11.0729E+00*exp(-(1.0E+00/7.3E+01)*TEMP);

    if ( GLYC_FRAC < 0.0E+00 ) {
        GLYC_FRAC = 0.0E+00;
    }

    GLYCOHA_RES = K0 * GLYC_FRAC;

    return GLYCOHA_RES;
}

double GC_GLYCOHB( float A0, float B0, float C0, double TEMP )
{
    
    /* */

    double GLYCOHB_RES;
    double K0;
    double GLYC_FRAC;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    GLYC_FRAC = 1.0E+00 - 11.0729E+00*exp(-(1.0E+00/7.3E+01)*TEMP);

    if ( GLYC_FRAC < 0.0E+00 ) {
        GLYC_FRAC = 0.0E+00;
    }

    GLYCOHB_RES = K0 * (1.0E+00 - GLYC_FRAC);

    return GLYCOHB_RES;
}

double GC_HACOHA( float A0, float B0, float C0, double TEMP )
{

    /* */

    double HACOHA_RES;
    double K0;
    double HAC_FRAC;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    HAC_FRAC = 1.0E+00 - 23.7E+00 * exp(-(1.0E+00/6.0E+01)*TEMP);

    if ( HAC_FRAC < 0.0E+00 ) {
        HAC_FRAC = 0.0E+00;
    }

    HACOHA_RES = K0*HAC_FRAC;
    
    return HACOHA_RES;
}

double GC_HACOHB( float A0, float B0, float C0, double TEMP )
{

    /* */

    double HACOHB_RES;
    double K0;
    double HAC_FRAC;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    HAC_FRAC = 1.0E+00 - 23.7E+00 * exp(-(1.0E+00/6.0E+01)*TEMP);

    if ( HAC_FRAC < 0.0E+00 ) {
        HAC_FRAC = 0.0E+00;
    }

    HACOHB_RES = K0*(1.0E+00 - HAC_FRAC);

    return HACOHB_RES;
}

double GC_OHCO( float A0, float B0, float C0, double PRESS, double AIRDENS, double TEMP )
{

    /* */

    double OHCO_RES;
    double K0;
    double KLO1, KHI1, KCO1, KLO2, KHI2, KCO2;
    double XYRAT1, BLOG1, XYRAT2, BLOG2;
    double FEXP1, FEXP2;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    K0 = K0 * (1.0E+00 + 0.6E+00*9.871E+07*PRESS);

    KLO1 = 5.9E-33*pow( (300.0/TEMP), (1.4E+00) );
    KHI1 = 1.1E-12*pow( (300.0/TEMP), (-1.3E+00) );
    XYRAT1 = KLO1*AIRDENS/KHI1;
    BLOG1 = log10(XYRAT1);
    FEXP1 = 1.0E+00/(1.0E+00 + BLOG1 * BLOG1);
    KCO1 = KLO1 * AIRDENS * pow( 0.6, (FEXP1) ) / (1.0E+00 + XYRAT1);
    KLO2 = 1.5E-13*pow( (300.0/TEMP), (-0.6E+00) );
    KHI2 = 2.1E+09*pow( (300.0/TEMP), (-6.1E+00) );
    XYRAT2 = KLO2*AIRDENS / KHI2;
    BLOG2 = log10(XYRAT2);
    FEXP2 = 1.0E+00 / (1.0E+00 + BLOG2*BLOG2);
    KCO2 = KLO2*pow( 0.6, (FEXP2)) / (1.0E+00 + XYRAT2);
    OHCO_RES = KCO1 + KCO2;

    return OHCO_RES;
}

double GC_RO2NO( const char *B, float A0, float B0, float C0, float A1, float B1, float C1, double TEMP, double AIRDENS )
{

    /* */

    double RO2NO_RES = 0.0;
    double Y300;
    double ALPHA, BETA;
    double XM0, XMINF, XF;
    double K0, K1;
    double XXYN, YYYN, AAA, ZZYN, RARB, FYRNO3;
    const char *STRA = "A";
    const char *STRB = "B";

    Y300 = 0.826E+00;
    ALPHA = 1.94E-22;
    BETA = 0.97E+00;
    XM0 = 0.0E+00;
    XMINF = 8.1E+00;
    XF = 0.411E+00;

    K0 = GCARR( (double)A0, (double)B0, (double)C0, TEMP );
    K1 = GCARR( (double)A1, (double)B1, (double)C1, TEMP );

    XXYN = ALPHA * exp(BETA*K1) * AIRDENS * pow( (300.0/TEMP), (XM0) );
    YYYN = Y300 * pow( (300.0/TEMP), (XMINF) );
    AAA = log10(XXYN/YYYN);
    ZZYN = 1.0E+00 / (1.0E+00 + AAA*AAA);
    RARB = (XXYN / (1.0E+00 + (XXYN/YYYN))) * pow( XF, (ZZYN) );
    FYRNO3 = RARB / (1.0E+00 + RARB);
    
    if ( strcmp( B, STRA ) ) {
        RO2NO_RES = K0 * FYRNO3;
    } else if ( strcmp( B, STRB ) ) {
        RO2NO_RES = K0 * (1.0E+00 - FYRNO3);
    }

    return RO2NO_RES;
}




/* End INLINED Rate Law Functions                                   */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Update_SUN - update SUN light using TIME                         */
/*   Arguments :                                                    */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

void Update_SUN( )
{

}

/* End of Update_SUN function                                       */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Update_RCONST - function to update rate constants                */
/*   Arguments :                                                    */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

void Update_RCONST( const double TEMP, const double PRESS,  \
                    const double AIRDENS, const double H2O ) 
{

/* Begin INLINED RCONST                                             */


/* End INLINED RCONST                                               */

    RCONST[  0] = (GCARR(3.00E-12, 0.0E+00, -1500.0, TEMP));
    RCONST[  1] = (GCARR(1.70E-12, 0.0E+00, -940.0, TEMP));
    RCONST[  2] = (GCARR(1.00E-14, 0.0E+00, -490.0, TEMP));
    RCONST[  3] = (GCARR(1.20E-13, 0.0E+00, -2450.0, TEMP));
    RCONST[  4] = (GCARR(2.90E-16, 0.0E+00, -1000.0, TEMP));
    RCONST[  5] = (GCARR(1.80E-12, 0.0E+00, 0.0, TEMP));
    RCONST[  6] = (GCJPLPR(6.90E-31, 1.0E+00, 0.0, 2.6E-11, 0.0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[  7] = (GCARR(4.80E-11, 0.0E+00, 250.0, TEMP));
    RCONST[  8] = (GCARR(1.80E-12, 0.0E+00, 0.0, TEMP));
    RCONST[  9] = (GCARR(3.30E-12, 0.0E+00, 270.0, TEMP));
    RCONST[ 10] = (GC_HO2NO3(3.00E-13, 0.0E+00, 460.0, 2.1E-33, 0.0, 920.0, AIRDENS, TEMP, H2O));
    RCONST[ 11] = (GC_OHCO(1.50E-13, 0.0E+00, 0.0, PRESS, AIRDENS, TEMP));
    RCONST[ 12] = (GCARR(2.45E-12, 0.0E+00, -1775.0, TEMP));
    RCONST[ 13] = (GCARR(2.80E-12, 0.0E+00, 300.0, TEMP));
    RCONST[ 14] = (GCARR(4.10E-13, 0.0E+00, 750.0, TEMP));
    RCONST[ 15] = (GC_TBRANCH(9.50E-14, 0.0E+00, 390.0, 2.62E1, 0.0, -1130.0, TEMP));
    RCONST[ 16] = (GC_TBRANCH(9.50E-14, 0.0E+00, 390.0, 4.E-2, 0.0, 1130.0, TEMP));
    RCONST[ 17] = (GCARR(2.66E-12, 0.0E+00, 200.0, TEMP));
    RCONST[ 18] = (GCARR(1.14E-12, 0.0E+00, 200.0, TEMP));
    RCONST[ 19] = (GCARR(2.66E-12, 0.0E+00, 200.0, TEMP));
    RCONST[ 20] = (GCARR(1.14E-12, 0.0E+00, 200.0, TEMP));
    RCONST[ 21] = (GCARR(5.50E-12, 0.0E+00, 125.0, TEMP));
    RCONST[ 22] = (GCJPLPR(1.80E-30, 3.0E+00, 0.0, 2.8E-11, 0.0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 23] = (GC_OHHNO3(2.41E-14, 0.0E+00, 460.0, 2.69E-17, 0.E0, 2199., 6.51E-34, 0.E0, 1335.0, AIRDENS, TEMP));
    RCONST[ 24] = (GCJPLPR(7.00E-31, 2.6E+00, 0.0, 3.60E-11, 0.1, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 25] = (GCARR(1.80E-11, 0.0E+00, -390.0, TEMP));
    RCONST[ 26] = (GCJPLPR(2.00E-31, 3.4E+00, 0.0, 2.9e-12, 1.1E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 27] = (GCJPLPR(9.52E-05, 3.4E+00, -10900.0, 1.38E15, 1.1E0, -10900.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 28] = (GCARR(1.30E-12, 0.0E+00, 380.0, TEMP));
    RCONST[ 29] = (GCARR(3.50E-12, 0.0E+00, 0.0, TEMP));
    RCONST[ 30] = (GCARR(1.50E-11, 0.0E+00, 170.0, TEMP));
    RCONST[ 31] = (GCARR(2.20E-11, 0.0E+00, 0.0, TEMP));
    RCONST[ 32] = (GCJPLPR(2.00E-30, 4.4E+00, 0.0, 1.4E-12, 0.7, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 33] = (GCJPLPR(7.40E-04, 4.4E+00, -11000.0, 5.18E14, 0.7, -11000.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 34] = (GCARR(4.00E-13, 0.0E+00, 0.0, TEMP));
    RCONST[ 35] = (GCARR(2.90E-12, 0.0E+00, -345.0, TEMP));
    RCONST[ 36] = (GCARR(4.50E-14, 0.0E+00, -1260.0, TEMP));
    RCONST[ 37] = (GCARR(5.80E-16, 0.0E+00, 0.0, TEMP));
    RCONST[ 38] = (GCARR(4.63E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 39] = (GCARR(1.40E-12, 0.0E+00, -1900.0, TEMP));
    RCONST[ 40] = (GCJPLPR(9.70E-29, 5.6E+00, 0.0, 9.3E-12, 1.5E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 41] = (GCJPLEQ(9.30E-29, 0.0E+00, 14000.0, 9.7E-29, 5.6E0, 0.0, 9.3E-12, 1.5E0, 0., 0.6, 0., 0., AIRDENS, TEMP));
    RCONST[ 42] = (GCARR(8.10E-12, 0.0E+00, 270.0, TEMP));
    RCONST[ 43] = (GCARR(7.66E-12, 0.0E+00, -1020.0, TEMP));
    RCONST[ 44] = (GCARR(2.60E-12, 0.0E+00, 365.0, TEMP));
    RCONST[ 45] = (GC_TBRANCH(7.60E-12, 0.0E+00, -585.0, 5.87E0, 0.64E0, -816.0, TEMP));
    RCONST[ 46] = (GC_TBRANCH(7.60E-12, 0.0E+00, -585.0, 1.7E-1, -0.64E0, 816.0, TEMP));
    RCONST[ 47] = (GCARR(2.90E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 48] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 49] = (GCARR(9.10E-12, 0.0E+00, -405.0, TEMP));
    RCONST[ 50] = (GC_RO2NO("B", 2.70E-12, 0.0E+00, 350.0, 4.5E0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 51] = (GC_RO2NO("A", 2.70E-12, 0.0E+00, 350.0, 4.5E0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 52] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 53] = (GCARR(2.80E-12, 0.0E+00, 300.0, TEMP));
    RCONST[ 54] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 55] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 56] = (GCARR(4.07E+08, 0.0E+00, -7694.0, TEMP));
    RCONST[ 57] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 58] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 59] = (GCARR(2.90E+07, 0.0E+00, -5297.0, TEMP));
    RCONST[ 60] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 61] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 62] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 63] = (GCARR(2.30E-12, 0.0E+00, 0.0, TEMP));
    RCONST[ 64] = (GCARR(3.15E-13, 0.0E+00, -448.0, TEMP));
    RCONST[ 65] = (GCARR(4.00E-12, 0.0E+00, 0.0, TEMP));
    RCONST[ 66] = (GCARR(6.70E-12, 0.0E+00, 340.0, TEMP));
    RCONST[ 67] = (GCJPLPR(9.00E-28, 8.9E+00, 0.0, 7.7E-12, 0.2, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 68] = (GCARR(5.20E-13, 0.0E+00, 980.0, TEMP));
    RCONST[ 69] = (GCARR(2.30E-12, 0.0E+00, 0.0, TEMP));
    RCONST[ 70] = (GCARR(2.60E-12, 0.0E+00, 380.0, TEMP));
    RCONST[ 71] = (GCARR(2.06E-13, 0.0E+00, 1300.0, TEMP));
    RCONST[ 72] = (GCARR(2.00E-13, 0.0E+00, 0.0, TEMP));
    RCONST[ 73] = (GCARR(4.15E-15, 0.0E+00, -1520.0, TEMP));
    RCONST[ 74] = (GCARR(7.48E-12, 0.0E+00, 410.0, TEMP));
    RCONST[ 75] = (GCARR(2.60E-12, 0.0E+00, 380.0, TEMP));
    RCONST[ 76] = (GCARR(2.06E-13, 0.0E+00, 1300.0, TEMP));
    RCONST[ 77] = (GCARR(2.06E-13, 0.0E+00, 0.0, TEMP));
    RCONST[ 78] = (GCARR(1.20E-12, 0.0E+00, 0.0, TEMP));
    RCONST[ 79] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[ 80] = (GCARR(2.80E-12, 0.0E+00, -3280.0, TEMP));
    RCONST[ 81] = (GCARR(1.60E-12, 0.0E+00, 0.0, TEMP));
    RCONST[ 82] = (GCARR(3.15E-14, 0.0E+00, 920.0, TEMP));
    RCONST[ 83] = (GCARR(6.00E-12, 0.0E+00, 410.0, TEMP));
    RCONST[ 84] = (GCJPLPR(9.00E-28, 8.9E+00, 0.0, 7.7E-12, 0.2, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 85] = (GCJPLEQ(9.00E-29, 0.0E+00, 14000.0, 9.00E-28, 8.9E0, 0.0, 7.7E-12, 0.2, 0., 0.6, 0., 0., AIRDENS, TEMP));
    RCONST[ 86] = (GCJPLPR(9.00E-28, 8.9E+00, 0.0, 7.7E-12, 0.2, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[ 87] = (GCJPLEQ(9.00E-29, 0.0E+00, 14000.0, 9.00E-28, 8.9E0, 0.0, 7.7E-12, 0.2, 0., 0.6, 0., 0., AIRDENS, TEMP));
    RCONST[ 88] = (GCARR(6.70E-12, 0.0E+00, 340.0, TEMP));
    RCONST[ 89] = (GCARR(6.70E-12, 0.0E+00, 340.0, TEMP));
    RCONST[ 90] = (GCARR(6.50E-15, 0.0E+00, 0.0, TEMP));
    RCONST[ 91] = (1.33E-13+3.82E-11*exp(-2000.0/TEMP));
    RCONST[ 92] = (GCARR(5.92E-13, 0.0E+00, 0.0, TEMP));
    RCONST[ 93] = (GCARR(5.92E-13, 0.0E+00, 0.0, TEMP));
    RCONST[ 94] = (GCARR(7.40E-13, 0.0E+00, 700.0, TEMP));
    RCONST[ 95] = (GCARR(7.40E-13, 0.0E+00, 700.0, TEMP));
    RCONST[ 96] = (GCARR(8.60E-13, 0.0E+00, 700.0, TEMP));
    RCONST[ 97] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 4.0, 0.0, 0.0, TEMP));
    RCONST[ 98] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 5.0, 0.0, 0.0, TEMP));
    RCONST[ 99] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 4.0, 0.0, 0.0, TEMP));
    RCONST[100] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 4.0, 0.0, 0.0, TEMP));
    RCONST[101] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 4.0, 0.0, 0.0, TEMP));
    RCONST[102] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 3.0, 0.0, 0.0, TEMP));
    RCONST[103] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 5.0, 0.0, 0.0, TEMP));
    RCONST[104] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 3.0, 0.0, 0.0, TEMP));
    RCONST[105] = (GCARR(1.30E-12, 0.0E+00, -25.0, TEMP));
    RCONST[106] = (GCARR(3.00E-13, 0.0E+00, 0.0, TEMP));
    RCONST[107] = (GCARR(8.00E-16, 0.0E+00, 0.0, TEMP));
    RCONST[108] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[109] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[110] = (GCARR(7.50E-13, 0.0E+00, 500.0, TEMP));
    RCONST[111] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[112] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[113] = (GCARR(1.54E-13, 0.0E+00, 0.0, TEMP));
    RCONST[114] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[115] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[116] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[117] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[118] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[119] = (GCARR(1.30E-12, 0.0E+00, 0.0, TEMP));
    RCONST[120] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[121] = (GCARR(3.35E-12, 0.0E+00, 0.0, TEMP));
    RCONST[122] = (GCARR(4.60E-12, 0.0E+00, 70.0, TEMP));
    RCONST[123] = (GCARR(4.10E-14, 0.0E+00, 0.0, TEMP));
    RCONST[124] = (GCARR(2.70E-14, 0.0E+00, 0.0, TEMP));
    RCONST[125] = (GCARR(7.40E-13, 0.0E+00, 700.0, TEMP));
    RCONST[126] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 3.0, 0.0, 0.0, TEMP));
    RCONST[127] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 3.0, 0.0, 0.0, TEMP));
    RCONST[128] = (GCARR(5.20E-13, 0.0E+00, 980.0, TEMP));
    RCONST[129] = (GCARR(4.30E-13, 0.0E+00, 1040.0, TEMP));
    RCONST[130] = (GCARR(4.30E-13, 0.0E+00, 1040.0, TEMP));
    RCONST[131] = (GCJPLPR(8.00E-27, 3.5E+00, 0.0, 3E-11, 1E0, 0.0, 0.5, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[132] = (GCARR(5.50E-15, 0.0E+00, -1880.0, TEMP));
    RCONST[133] = (GCARR(2.90E-11, 0.0E+00, 0.0, TEMP));
    RCONST[134] = (GCARR(8.20E-18, 0.0E+00, 0.0, TEMP));
    RCONST[135] = (GC_GLYCOHA(8.00E-12, 0.0E+00, 0.0, TEMP));
    RCONST[136] = (GC_GLYCOHB(8.00E-12, 0.0E+00, 0.0, TEMP));
    RCONST[137] = (GCARR(4.59E-13, 0.0E+00, -1156.0, TEMP));
    RCONST[138] = (GCARR(3.10E-12, 0.0E+00, 340.0, TEMP));
    RCONST[139] = (GCARR(1.50E-11, 0.0E+00, 0.0, TEMP));
    RCONST[140] = (GC_GLYXNO3(1.40E-12, 0.0E+00, -1860.0, AIRDENS, TEMP));
    RCONST[141] = (GCARR(3.36E-12, 0.0E+00, -1860.0, TEMP));
    RCONST[142] = (GCARR(2.60E-12, 0.0E+00, 610.0, TEMP));
    RCONST[143] = (GCARR(8.00E-12, 0.0E+00, 380.0, TEMP));
    RCONST[144] = (GC_HACOHA(2.15E-12, 0.0E+00, 305.0, TEMP));
    RCONST[145] = (GC_HACOHB(2.15E-12, 0.0E+00, 305.0, TEMP));
    RCONST[146] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[147] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[148] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[149] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[150] = (GCARR(1.00E-14, 0.0E+00, -1970.0, TEMP));
    RCONST[151] = (GCARR(8.50E-16, 0.0E+00, -1520.0, TEMP));
    RCONST[152] = (GCARR(1.40E-15, 0.0E+00, -2100.0, TEMP));
    RCONST[153] = (GCARR(2.30E-15, 0.0E+00, 0.0, TEMP));
    RCONST[154] = (GCARR(1.10E-15, 0.0E+00, 0.0, TEMP));
    RCONST[155] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[156] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[157] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[158] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[159] = (GCARR(1.90E-11, 0.0E+00, 390.0, TEMP));
    RCONST[160] = (GCARR(5.18E-12, 0.0E+00, 200.0, TEMP));
    RCONST[161] = (GCARR(8.78E-12, 0.0E+00, 200.0, TEMP));
    RCONST[162] = (GCARR(5.18E-12, 0.0E+00, 200.0, TEMP));
    RCONST[163] = (GCARR(5.18E-12, 0.0E+00, 200.0, TEMP));
    RCONST[164] = (GCARR(8.78E-12, 0.0E+00, 200.0, TEMP));
    RCONST[165] = (GCARR(8.78E-12, 0.0E+00, 200.0, TEMP));
    RCONST[166] = (GCARR(6.13E-13, 0.0E+00, 200.0, TEMP));
    RCONST[167] = (GCARR(8.78E-12, 0.0E+00, 200.0, TEMP));
    RCONST[168] = (GCARR(4.75E-12, 0.0E+00, 200.0, TEMP));
    RCONST[169] = (GCARR(1.90E-11, 0.0E+00, 390.0, TEMP));
    RCONST[170] = (GCARR(5.78E-11, 0.0E+00, -400.0, TEMP));
    RCONST[171] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 5.0, 0.0, 0.0, TEMP));
    RCONST[172] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[173] = (GCARR(5.31E-12, 0.0E+00, 200.0, TEMP));
    RCONST[174] = (GCARR(8.78E-12, 0.0E+00, 200.0, TEMP));
    RCONST[175] = (GCARR(1.84E-12, 0.0E+00, 200.0, TEMP));
    RCONST[176] = (GCARR(4.40E-12, 0.0E+00, 380.0, TEMP));
    RCONST[177] = (GCARR(6.13E-13, 0.0E+00, 200.0, TEMP));
    RCONST[178] = (GCARR(3.60E-12, 0.0E+00, 380.0, TEMP));
    RCONST[179] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[180] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[181] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[182] = (GCARR(8.37E-14, 0.0E+00, 0.0, TEMP));
    RCONST[183] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 4.0, 0.0, 0.0, TEMP));
    RCONST[184] = (GC_RO2NO("B", 2.70E-12, 0.0E+00, 350.0, 4.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[185] = (GC_RO2NO("A", 2.70E-12, 0.0E+00, 350.0, 4.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[186] = (GCARR(6.13E-13, 0.0E+00, 200.0, TEMP));
    RCONST[187] = (GCARR(1.40E-18, 0.0E+00, 0.0, TEMP));
    RCONST[188] = (GCARR(6.16E-15, 0.0E+00, -1814.0, TEMP));
    RCONST[189] = (GCARR(2.50E-12, 0.0E+00, 500.0, TEMP));
    RCONST[190] = (GCARR(1.80E-12, 0.0E+00, 500.0, TEMP));
    RCONST[191] = (GCARR(2.00E-13, 0.0E+00, 500.0, TEMP));
    RCONST[192] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[193] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[194] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[195] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[196] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[197] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[198] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[199] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[200] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[201] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[202] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[203] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[204] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[205] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[206] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[207] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[208] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[209] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[210] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[211] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[212] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[213] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[214] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[215] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[216] = (GCARR(1.68E-12, 0.0E+00, 500.0, TEMP));
    RCONST[217] = (GCARR(1.87E-13, 0.0E+00, 500.0, TEMP));
    RCONST[218] = (GCARR(2.50E-12, 0.0E+00, 500.0, TEMP));
    RCONST[219] = (GCARR(2.50E-12, 0.0E+00, 500.0, TEMP));
    RCONST[220] = (GCARR(8.50E-13, 0.0E+00, -2450.0, TEMP));
    RCONST[221] = (GCJPLPR(1.00E-30, 4.8E+00, 0.0, 7.2E-12, 2.1E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[222] = (GCJPLPR(1.05E-02, 4.8E+00, -11234.0, 7.58E16, 2.1E0, -11234.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[223] = (GCARR(1.06E-16, 0.0E+00, 0.0, TEMP));
    RCONST[224] = (GCARR(5.30E-17, 0.0E+00, 0.0, TEMP));
    RCONST[225] = (HET[ind_HO2][0]);
    RCONST[226] = (HET[ind_NO2][0]);
    RCONST[227] = (HET[ind_NO3][0]);
    RCONST[228] = (HET[ind_N2O5][0]);
    RCONST[229] = (GCJPLPR(3.30E-31, 4.3E+00, 0.0, 1.6E-12, 0.0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[230] = (GCARR(1.60E-11, 0.0E+00, -780.0, TEMP));
    RCONST[231] = (GCARR(4.50E-12, 0.0E+00, 460.0, TEMP));
    RCONST[232] = (GCARR(4.80E-12, 0.0E+00, -310.0, TEMP));
    RCONST[233] = (GCARR(5.50E-12, 0.0E+00, 200.0, TEMP));
    RCONST[234] = (GCARR(2.40E-12, 0.0E+00, 40.0, TEMP));
    RCONST[235] = (GCARR(2.80E-14, 0.0E+00, 860.0, TEMP));
    RCONST[236] = (GCARR(8.80E-12, 0.0E+00, 260.0, TEMP));
    RCONST[237] = (GCARR(4.90E-11, 0.0E+00, 0.0, TEMP));
    RCONST[238] = (GCARR(2.10E-11, 0.0E+00, 240.0, TEMP));
    RCONST[239] = (GCARR(1.20E-10, 0.0E+00, -430.0, TEMP));
    RCONST[240] = (GCARR(5.80E-12, 0.0E+00, -1500.0, TEMP));
    RCONST[241] = (GCARR(1.70E-11, 0.0E+00, 250.0, TEMP));
    RCONST[242] = (GCARR(1.60E-11, 0.0E+00, 0.0, TEMP));
    RCONST[243] = (GCARR(1.70E-11, 0.0E+00, -800.0, TEMP));
    RCONST[244] = (GCARR(1.30E-11, 0.0E+00, -360.0, TEMP));
    RCONST[245] = (GCARR(1.66E-10, 0.0E+00, -7000.0, TEMP));
    RCONST[246] = (GCARR(2.36E-10, 0.0E+00, -6411.0, TEMP));
    RCONST[247] = (GCARR(8.77E-11, 0.0E+00, -4330.0, TEMP));
    RCONST[248] = (GCJPLPR(4.20E-31, 2.4E+00, 0.0, 2.7E-11, 0.0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[249] = (GCJPLPR(5.20E-31, 3.2E+00, 0.0, 6.9E-12, 2.9E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[250] = (HET[ind_BrNO3][0]);
    RCONST[251] = (HET[ind_HOBr][0]);
    RCONST[252] = (HET[ind_HBr][0]);
    RCONST[253] = (HET[ind_HOBr][1]);
    RCONST[254] = (HET[ind_HBr][1]);
    RCONST[255] = (GCARR(3.35E-11, 0.0E+00, 380.0, TEMP));
    RCONST[256] = (GC_RO2NO("B", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[257] = (GC_RO2NO("A", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[258] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 5.0, 0.0, 0.0, TEMP));
    RCONST[259] = (GCARR(2.64E-11, 0.0E+00, 380.0, TEMP));
    RCONST[260] = (GCARR(3.61E-12, 0.0E+00, 380.0, TEMP));
    RCONST[261] = (GC_RO2NO("B", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[262] = (GC_RO2NO("A", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[263] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 5.0, 0.0, 0.0, TEMP));
    RCONST[264] = (GC_RO2NO("B", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[265] = (GC_RO2NO("A", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[266] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 5.0, 0.0, 0.0, TEMP));
    RCONST[267] = (GCARR(4.75E-12, 0.0E+00, 200.0, TEMP));
    RCONST[268] = (GCARR(1.39E-11, 0.0E+00, 380.0, TEMP));
    RCONST[269] = (GCARR(2.70E-12, 0.0E+00, 350.0, TEMP));
    RCONST[270] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 4.0, 0.0, 0.0, TEMP));
    RCONST[271] = (GCJPLPR(9.00E-28, 8.9E+00, 0.0, 7.7E-12, 0.2, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[272] = (GCJPLEQ(9.00E-29, 0.0E+00, 14000.0, 9.00E-28, 8.9E0, 0.0, 7.7E-12, 0.2, 0., 0.6, 0., 0., AIRDENS, TEMP));
    RCONST[273] = (GCARR(2.52E-12, 0.0E+00, 410.0, TEMP));
    RCONST[274] = (GC_RO2NO("B", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[275] = (GC_RO2NO("A", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[276] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 5.0, 0.0, 0.0, TEMP));
    RCONST[277] = (GCARR(2.79E-11, 0.0E+00, 380.0, TEMP));
    RCONST[278] = (GC_RO2NO("B", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[279] = (GC_RO2NO("A", 2.70E-12, 0.0E+00, 350.0, 5.0, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[280] = (GC_RO2HO2(2.91E-13, 0.0E+00, 1300.0, 5.0, 0.0, 0.0, TEMP));
    RCONST[281] = (GCARR(2.00E-17, 0.0E+00, 0.0, TEMP));
    RCONST[282] = (GCARR(1.00E-11, 0.0E+00, 0.0, TEMP));
    RCONST[283] = (GCARR(1.00E-15, 0.0E+00, 0.0, TEMP));
    RCONST[284] = (GCARR(1.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[285] = (GCARR(1.00E-15, 0.0E+00, 0.0, TEMP));
    RCONST[286] = (GCARR(7.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[287] = (GCARR(6.00E-18, 0.0E+00, 0.0, TEMP));
    RCONST[288] = (GCARR(1.00E-17, 0.0E+00, 0.0, TEMP));
    RCONST[289] = (GCARR(1.20E-15, 0.0E+00, 0.0, TEMP));
    RCONST[290] = (GCARR(1.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[291] = (GCARR(1.00E-15, 0.0E+00, 0.0, TEMP));
    RCONST[292] = (GCARR(7.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[293] = (GCARR(1.00E-17, 0.0E+00, 0.0, TEMP));
    RCONST[294] = (GCARR(6.00E-18, 0.0E+00, 0.0, TEMP));
    RCONST[295] = (GCARR(1.20E-15, 0.0E+00, 0.0, TEMP));
    RCONST[296] = (GCARR(1.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[297] = (GCARR(1.00E-15, 0.0E+00, 0.0, TEMP));
    RCONST[298] = (GCARR(7.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[299] = (GCARR(6.00E-18, 0.0E+00, 0.0, TEMP));
    RCONST[300] = (GCARR(1.20E-15, 0.0E+00, 0.0, TEMP));
    RCONST[301] = (GCARR(1.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[302] = (GCARR(1.00E-15, 0.0E+00, 0.0, TEMP));
    RCONST[303] = (GCARR(7.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[304] = (GCARR(6.00E-18, 0.0E+00, 0.0, TEMP));
    RCONST[305] = (GCARR(1.20E-15, 0.0E+00, 0.0, TEMP));
    RCONST[306] = (GCARR(1.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[307] = (GCARR(1.00E-15, 0.0E+00, 0.0, TEMP));
    RCONST[308] = (GCARR(7.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[309] = (GCARR(1.00E-17, 0.0E+00, 0.0, TEMP));
    RCONST[310] = (GCARR(6.00E-18, 0.0E+00, 0.0, TEMP));
    RCONST[311] = (GCARR(1.20E-15, 0.0E+00, 0.0, TEMP));
    RCONST[312] = (GCARR(1.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[313] = (GCARR(1.00E-15, 0.0E+00, 0.0, TEMP));
    RCONST[314] = (GCARR(7.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[315] = (GCARR(6.00E-18, 0.0E+00, 0.0, TEMP));
    RCONST[316] = (GCARR(1.00E-17, 0.0E+00, 0.0, TEMP));
    RCONST[317] = (GCARR(1.20E-15, 0.0E+00, 0.0, TEMP));
    RCONST[318] = (GCARR(1.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[319] = (GCARR(1.00E-15, 0.0E+00, 0.0, TEMP));
    RCONST[320] = (GCARR(7.00E-14, 0.0E+00, 0.0, TEMP));
    RCONST[321] = (GCARR(6.00E-18, 0.0E+00, 0.0, TEMP));
    RCONST[322] = (GCARR(1.00E-17, 0.0E+00, 0.0, TEMP));
    RCONST[323] = (GCARR(1.63E-10, 0.0E+00, 60.0, TEMP));
    RCONST[324] = (GCARR(2.15E-11, 0.0E+00, 110.0, TEMP));
    RCONST[325] = (GCARR(3.30E-11, 0.0E+00, 55.0, TEMP));
    RCONST[326] = (GCARR(1.20E-10, 0.0E+00, 0.0, TEMP));
    RCONST[327] = (GCARR(4.63E-11, 0.0E+00, 20.0, TEMP));
    RCONST[328] = (GCARR(7.25E-11, 0.0E+00, 20.0, TEMP));
    RCONST[329] = (GCARR(1.31E-10, 0.0E+00, 0.0, TEMP));
    RCONST[330] = (GCARR(0.09E-10, 0.0E+00, 0.0, TEMP));
    RCONST[331] = (GCARR(0.35E-10, 0.0E+00, 0.0, TEMP));
    RCONST[332] = (GCARR(6.00E-34, 2.4E+00, 0.0, TEMP)*AIRDENS);
    RCONST[333] = (GCARR(8.00E-12, 0.0E+00, -2060.0, TEMP));
    RCONST[334] = (GCARR(2.80E-12, 0.0E+00, -1800.0, TEMP));
    RCONST[335] = (GCARR(1.80E-11, 0.0E+00, 180.0, TEMP));
    RCONST[336] = (GCARR(3.00E-11, 0.0E+00, 200.0, TEMP));
    RCONST[337] = (GCARR(1.20E-10, 0.0E+00, 0.0, TEMP));
    RCONST[338] = (GCARR(1.20E-10, 0.0E+00, 0.0, TEMP));
    RCONST[339] = (GCARR(5.10E-12, 0.0E+00, 210.0, TEMP));
    RCONST[340] = (GCARR(1.00E-11, 0.0E+00, 0.0, TEMP));
    RCONST[341] = (GCJPLPR(9.00E-32, 1.5E+00, 0.0, 3.0E-11, 0.0E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[342] = (GCJPLPR(2.50E-31, 1.8E+00, 0.0, 2.2E-11, 0.7E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[343] = (GCARR(1.40E-12, 0.0E+00, -2000.0, TEMP));
    RCONST[344] = (GCJPLPR(4.40E-32, 1.3E+00, 0.0, 7.5E-11, -0.2E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[345] = (GCARR(1.40E-10, 0.0E+00, -470.0, TEMP));
    RCONST[346] = (GCARR(7.20E-11, 0.0E+00, 0.0, TEMP));
    RCONST[347] = (GCARR(1.60E-12, 0.0E+00, 0.0, TEMP));
    RCONST[348] = (GCARR(6.90E-12, 0.0E+00, 0.0, TEMP));
    RCONST[349] = (GCARR(1.50E-11, 0.0E+00, -3600.0, TEMP));
    RCONST[350] = (GCARR(2.10E-11, 0.0E+00, 100.0, TEMP));
    RCONST[351] = (GCARR(5.80E-12, 0.0E+00, 220.0, TEMP));
    RCONST[352] = (GCARR(1.90E-11, 0.0E+00, 230.0, TEMP));
    RCONST[353] = (GCARR(3.40E-11, 0.0E+00, -1600.0, TEMP));
    RCONST[354] = (GCARR(1.50E-10, 0.0E+00, 0.0, TEMP));
    RCONST[355] = (GCARR(1.50E-10, 0.0E+00, 0.0, TEMP));
    RCONST[356] = (GCARR(2.70E-10, 0.0E+00, 0.0, TEMP));
    RCONST[357] = (GCARR(2.60E-12, 0.0E+00, -1100.0, TEMP));
    RCONST[358] = (GCARR(3.30E-12, 0.0E+00, -115.0, TEMP));
    RCONST[359] = (GCARR(7.40E-12, 0.0E+00, 270.0, TEMP));
    RCONST[360] = (GCARR(6.00E-13, 0.0E+00, 230.0, TEMP));
    RCONST[361] = (GCARR(1.40E-12, 0.0E+00, 600.0, TEMP));
    RCONST[362] = (GCARR(6.00E-13, 0.0E+00, 670.0, TEMP));
    RCONST[363] = (GCARR(1.80E-12, 0.0E+00, -250.0, TEMP));
    RCONST[364] = (GCARR(3.00E-12, 0.0E+00, -500.0, TEMP));
    RCONST[365] = (GCARR(2.40E-12, 0.0E+00, -1250.0, TEMP));
    RCONST[366] = (GCARR(1.20E-12, 0.0E+00, -330.0, TEMP));
    RCONST[367] = (GCARR(7.30E-12, 0.0E+00, -1280.0, TEMP));
    RCONST[368] = (GCARR(8.10E-11, 0.0E+00, -30.0, TEMP));
    RCONST[369] = (GCARR(2.30E-11, 0.0E+00, -200.0, TEMP));
    RCONST[370] = (GCARR(3.05E-11, 0.0E+00, -2270.0, TEMP));
    RCONST[371] = (GCARR(1.10E-11, 0.0E+00, -980.0, TEMP));
    RCONST[372] = (GCARR(1.40E-11, 0.0E+00, 270.0, TEMP));
    RCONST[373] = (GCARR(3.60E-11, 0.0E+00, -375.0, TEMP));
    RCONST[374] = (GCARR(2.80E-11, 0.0E+00, 85.0, TEMP));
    RCONST[375] = (GCARR(2.60E-12, 0.0E+00, 290.0, TEMP));
    RCONST[376] = (GCARR(6.40E-12, 0.0E+00, 290.0, TEMP));
    RCONST[377] = (GCJPLPR(1.80E-31, 3.4E+00, 0.0, 1.50E-11, 1.9E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[378] = (GCARR(1.00E-12, 0.0E+00, -1590.0, TEMP));
    RCONST[379] = (GCARR(3.00E-11, 0.0E+00, -2450.0, TEMP));
    RCONST[380] = (GCARR(3.50E-13, 0.0E+00, -1370.0, TEMP));
    RCONST[381] = (GCJPLPR(2.20E-33, 3.1E+00, 0.0, 1.8E-10, 0.0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[382] = (GCJPLPR(3.33E-09, 3.1E+00, -2502.0, 2.73E+14, 0.0, -2502.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[383] = (GCJPLPR(1.60E-32, 4.5E+00, 0.0, 3.0E-12, 2.0E0, 0.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[384] = (GCJPLPR(9.30E-06, 4.5E+00, -8649.0, 1.74E+15, 2.0E0, -8649.0, 0.6, 0.0, 0.0, AIRDENS, TEMP));
    RCONST[385] = (GCARR(2.30E-10, 0.0E+00, 0.0, TEMP));
    RCONST[386] = (GCARR(1.20E-11, 0.0E+00, 0.0, TEMP));
    RCONST[387] = (GCARR(9.50E-13, 0.0E+00, 550.0, TEMP));
    RCONST[388] = (GCARR(2.30E-12, 0.0E+00, 260.0, TEMP));
    RCONST[389] = (GCARR(4.10E-13, 0.0E+00, 290.0, TEMP));
    RCONST[390] = (GCARR(3.60E-12, 0.0E+00, -840.0, TEMP));
    RCONST[391] = (GCARR(6.50E-12, 0.0E+00, 135.0, TEMP));
    RCONST[392] = (HET[ind_N2O5][1]);
    RCONST[393] = (HET[ind_ClNO3][0]);
    RCONST[394] = (HET[ind_ClNO3][1]);
    RCONST[395] = (HET[ind_ClNO3][2]);
    RCONST[396] = (HET[ind_BrNO3][1]);
    RCONST[397] = (HET[ind_HOCl][0]);
    RCONST[398] = (HET[ind_HOCl][1]);
    RCONST[399] = (HET[ind_HOBr][2]);
    RCONST[400] = (PHOTOL[  1]); // O3 -> O + O2
    RCONST[401] = (PHOTOL[  2]); // O3 -> O1D + O2
    RCONST[402] = (PHOTOL[  0]); // O2 -> 2O
    RCONST[403] = (PHOTOL[ 10]); //  NO2 -> NO + O // 1.41E-02
    RCONST[404] = (PHOTOL[  8]); // H2O2 -> 2OH
    RCONST[405] = (PHOTOL[  9]); // MP -> CH2O + HO2 + OH
    RCONST[406] = (PHOTOL[  6]); // CH2O -> HO2 + H + CO
    RCONST[407] = (PHOTOL[  7]); // CH2O -> H2 + CO
    RCONST[408] = (PHOTOL[ 15]); // HNO3 -> OH + NO2
    RCONST[409] = (PHOTOL[ 14]); // HNO2 -> OH + NO
    RCONST[410] = (PHOTOL[ 16]); // HNO4 -> OH + NO3
    RCONST[411] = (PHOTOL[ 17]); // HNO4 -> HO2 + NO2
    RCONST[412] = (PHOTOL[ 11]); // NO3 -> NO2 + O
    RCONST[413] = (PHOTOL[ 12]); // NO3 -> NO + O2
    RCONST[414] = (PHOTOL[ 13]); // N2O5 -> NO3 + NO2
    RCONST[415] = (PHOTOL[ 60]); // ALD2 -> .88MO2 + HO2 + .88CO + .12MCO3
    RCONST[416] = (PHOTOL[ 61]); // ALD2 -> CH4 + CO
    RCONST[417] = (PHOTOL[ 58]); // PAN -> .7MCO3 + .7NO2 + .3MO2 + .3NO3
    RCONST[418] = (PHOTOL[ 69]); // RCHO -> ETO2 + HO2 + CO
    RCONST[419] = (PHOTOL[ 75]); // ACET -> MCO3 + MO2
    RCONST[420] = (PHOTOL[ 76]); // ACET -> 2MO2 + CO
    RCONST[421] = (PHOTOL[ 68]); // MEK -> .85MCO3 + .85ETO2 + .15MO2 + .15RCO3
    RCONST[422] = (PHOTOL[ 67]); // GLYC -> .9CH2O + 1.73HO2 + CO + .07OH + .1MOH
    RCONST[423] = (PHOTOL[ 71]); // GLYX -> 2HO2 + 2CO
    RCONST[424] = (PHOTOL[ 72]); // GLYX -> H2 + 2CO
    RCONST[425] = (PHOTOL[ 73]); // GLYX -> CH2O + CO
    RCONST[426] = (PHOTOL[ 70]); // MGLY -> MCO3 + CO +HO2
    RCONST[427] = (PHOTOL[ 62]); // MVK -> PRPE + CO
    RCONST[428] = (PHOTOL[ 63]); // MVK -> MCO3 + CH2O + CO + HO2
    RCONST[429] = (PHOTOL[ 64]); // MVK -> MO2 + RCO3
    RCONST[430] = (PHOTOL[ 65]); // MACR -> CO + HO2 + CH2O + MCO3
    RCONST[431] = (PHOTOL[ 74]); // HAC -> MCO3 + CH2O + HO2
    RCONST[432] = (PHOTOL[ 77]); // INPN -> OH + HO2 + RCHO + NO2
    RCONST[433] = (PHOTOL[ 78]); // PRPN -> OH + HO2 + RCHO + NO2
    RCONST[434] = (PHOTOL[ 79]); // ETP -> OH + HO2 + ALD2
    RCONST[435] = (PHOTOL[ 80]); // RA3P -> OH + HO2 + RCHO
    RCONST[436] = (PHOTOL[ 81]); // RB3P -> OH + HO2 + ACET
    RCONST[437] = (PHOTOL[ 82]); // R4P -> OH + HO2 + RCHO
    RCONST[438] = (PHOTOL[ 83]); // PP -> OH + HO2 + ALD2 + CH2O
    RCONST[439] = (PHOTOL[ 84]); // RP -> OH + HO2 + ALD2
    RCONST[440] = (PHOTOL[ 85]); // RIP -> OH + HO2 + .71CH2O + .425MVK + .285MACR + .29HC5
    RCONST[441] = (PHOTOL[ 86]); // IAP -> OH + HO2 + .67CO + .19H2 + .36HAC + .26GLYC + .58MGLY
    RCONST[442] = (PHOTOL[ 87]); // ISNP -> OH + HO2 + RCHO + NO2
    RCONST[443] = (PHOTOL[ 88]); // VRP -> OH + .3HO2 + .3CH2O + .7MCO3 + .7GLYC + .3MGLY
    RCONST[444] = (PHOTOL[ 89]); // MRP -> OH + HO2 + HAC + .5CO + .5CH2O
    RCONST[445] = (PHOTOL[ 90]); // MAOP -> OH + CH2O + MCO3
    RCONST[446] = (PHOTOL[ 97]); // R4N2 -> NO2 + .32ACET + .19MEK + .18MO2 + .27HO2 + .32ALD2 + .13RCHO + .05A3O2 + .18B3O2 + .32ETO2
    RCONST[447] = (PHOTOL[ 98]); // MAP -> OH + MO2
    RCONST[448] = (PHOTOL[ 91]); // MACRN -> NO2 + HAC + MGLY -> 0.5CH2O + HO2 + .5CO
    RCONST[449] = (PHOTOL[ 92]); // MVKN -> GLYC + NO2 + MCO3
    RCONST[450] = (PHOTOL[ 93]); // ISOPNB -> HC5 + NO2 + HO2
    RCONST[451] = (PHOTOL[ 22]); // Br2 -> 2Br
    RCONST[452] = (PHOTOL[ 27]); // BrO -> Br + O
    RCONST[453] = (PHOTOL[ 31]); // HOBr -> Br + OH
    RCONST[454] = (PHOTOL[ 28]); // BrNO3 -> Br + NO3
    RCONST[455] = (PHOTOL[ 29]); // BrNO3 -> BrO + NO2
    RCONST[456] = (PHOTOL[ 30]); // BrNO2 -> Br + NO2
    RCONST[457] = (PHOTOL[103]); // MPN -> CH2O + NO3 + HO2
    RCONST[458] = (PHOTOL[104]); // MPN -> MO2 + NO2
    RCONST[459] = (PHOTOL[ 94]); // ISOPND -> HC5 + NO2 + HO2
    RCONST[460] = (PHOTOL[ 95]); // PROPNN -> CH2O + NO2 + CO + MO2
    RCONST[461] = (PHOTOL[ 96]); // ATOOH -> OH + CH2O + MCO3
    RCONST[462] = (PHOTOL[ 35]); // N2O -> N2 + O1D
    RCONST[463] = (PHOTOL[ 99]); // SO4 -> SO2 + 2OH
    RCONST[464] = (PHOTOL[  5]); // NO -> O + N
    RCONST[465] = (PHOTOL[ 32]); // BrCl -> Br + Cl
    RCONST[466] = (PHOTOL[ 21]); // Cl2 -> 2Cl
    RCONST[467] = (PHOTOL[ 26]); // ClO -> Cl + O
    RCONST[468] = (PHOTOL[ 24]); // OClO -> ClO + O
    RCONST[469] = (PHOTOL[ 25]); // Cl2O2 -> Cl + ClOO
    RCONST[470] = (PHOTOL[ 20]); // ClNO2 -> Cl + NO2
    RCONST[471] = (PHOTOL[ 18]); // ClNO3 -> Cl + NO3
    RCONST[472] = (PHOTOL[ 19]); // ClNO3 -> ClO + NO2
    RCONST[473] = (PHOTOL[ 23]); // HOCl -> Cl + OH
    RCONST[474] = (PHOTOL[101]); // ClOO -> Cl + O2

}

/* End of Update_RCONST function                                    */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Update_PHOTO - function to update photolytical rate constants    */
/*   Arguments :                                                    */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

void Update_PHOTO( )
{

    Update_JRates( PHOTOL,           \
                   MAX( SZA_CST[0] + \
                        SZA_CST[1] * \
                        cos( SZA_CST[2] * fabs( TIME / double(3600.0) - 12.0 ) ), 0.0E+00 ) );

    RCONST[400] = (PHOTOL[  1]); // O3 -> O + O2
    RCONST[401] = (PHOTOL[  2]); // O3 -> O1D + O2
    RCONST[402] = (PHOTOL[  0]); // O2 -> 2O
    RCONST[403] = (PHOTOL[ 10]); //  NO2 -> NO + O // 1.41E-02
    RCONST[404] = (PHOTOL[  8]); // H2O2 -> 2OH
    RCONST[405] = (PHOTOL[  9]); // MP -> CH2O + HO2 + OH
    RCONST[406] = (PHOTOL[  6]); // CH2O -> HO2 + H + CO
    RCONST[407] = (PHOTOL[  7]); // CH2O -> H2 + CO
    RCONST[408] = (PHOTOL[ 15]); // HNO3 -> OH + NO2
    RCONST[409] = (PHOTOL[ 14]); // HNO2 -> OH + NO
    RCONST[410] = (PHOTOL[ 16]); // HNO4 -> OH + NO3
    RCONST[411] = (PHOTOL[ 17]); // HNO4 -> HO2 + NO2
    RCONST[412] = (PHOTOL[ 11]); // NO3 -> NO2 + O
    RCONST[413] = (PHOTOL[ 12]); // NO3 -> NO + O2
    RCONST[414] = (PHOTOL[ 13]); // N2O5 -> NO3 + NO2
    RCONST[415] = (PHOTOL[ 60]); // ALD2 -> .88MO2 + HO2 + .88CO + .12MCO3
    RCONST[416] = (PHOTOL[ 61]); // ALD2 -> CH4 + CO
    RCONST[417] = (PHOTOL[ 58]); // PAN -> .7MCO3 + .7NO2 + .3MO2 + .3NO3
    RCONST[418] = (PHOTOL[ 69]); // RCHO -> ETO2 + HO2 + CO
    RCONST[419] = (PHOTOL[ 75]); // ACET -> MCO3 + MO2
    RCONST[420] = (PHOTOL[ 76]); // ACET -> 2MO2 + CO
    RCONST[421] = (PHOTOL[ 68]); // MEK -> .85MCO3 + .85ETO2 + .15MO2 + .15RCO3
    RCONST[422] = (PHOTOL[ 67]); // GLYC -> .9CH2O + 1.73HO2 + CO + .07OH + .1MOH
    RCONST[423] = (PHOTOL[ 71]); // GLYX -> 2HO2 + 2CO
    RCONST[424] = (PHOTOL[ 72]); // GLYX -> H2 + 2CO
    RCONST[425] = (PHOTOL[ 73]); // GLYX -> CH2O + CO
    RCONST[426] = (PHOTOL[ 70]); // MGLY -> MCO3 + CO +HO2
    RCONST[427] = (PHOTOL[ 62]); // MVK -> PRPE + CO
    RCONST[428] = (PHOTOL[ 63]); // MVK -> MCO3 + CH2O + CO + HO2
    RCONST[429] = (PHOTOL[ 64]); // MVK -> MO2 + RCO3
    RCONST[430] = (PHOTOL[ 65]); // MACR -> CO + HO2 + CH2O + MCO3
    RCONST[431] = (PHOTOL[ 74]); // HAC -> MCO3 + CH2O + HO2
    RCONST[432] = (PHOTOL[ 77]); // INPN -> OH + HO2 + RCHO + NO2
    RCONST[433] = (PHOTOL[ 78]); // PRPN -> OH + HO2 + RCHO + NO2
    RCONST[434] = (PHOTOL[ 79]); // ETP -> OH + HO2 + ALD2
    RCONST[435] = (PHOTOL[ 80]); // RA3P -> OH + HO2 + RCHO
    RCONST[436] = (PHOTOL[ 81]); // RB3P -> OH + HO2 + ACET
    RCONST[437] = (PHOTOL[ 82]); // R4P -> OH + HO2 + RCHO
    RCONST[438] = (PHOTOL[ 83]); // PP -> OH + HO2 + ALD2 + CH2O
    RCONST[439] = (PHOTOL[ 84]); // RP -> OH + HO2 + ALD2
    RCONST[440] = (PHOTOL[ 85]); // RIP -> OH + HO2 + .71CH2O + .425MVK + .285MACR + .29HC5
    RCONST[441] = (PHOTOL[ 86]); // IAP -> OH + HO2 + .67CO + .19H2 + .36HAC + .26GLYC + .58MGLY
    RCONST[442] = (PHOTOL[ 87]); // ISNP -> OH + HO2 + RCHO + NO2
    RCONST[443] = (PHOTOL[ 88]); // VRP -> OH + .3HO2 + .3CH2O + .7MCO3 + .7GLYC + .3MGLY
    RCONST[444] = (PHOTOL[ 89]); // MRP -> OH + HO2 + HAC + .5CO + .5CH2O
    RCONST[445] = (PHOTOL[ 90]); // MAOP -> OH + CH2O + MCO3
    RCONST[446] = (PHOTOL[ 97]); // R4N2 -> NO2 + .32ACET + .19MEK + .18MO2 + .27HO2 + .32ALD2 + .13RCHO + .05A3O2 + .18B3O2 + .32ETO2
    RCONST[447] = (PHOTOL[ 98]); // MAP -> OH + MO2
    RCONST[448] = (PHOTOL[ 91]); // MACRN -> NO2 + HAC + MGLY -> 0.5CH2O + HO2 + .5CO
    RCONST[449] = (PHOTOL[ 92]); // MVKN -> GLYC + NO2 + MCO3
    RCONST[450] = (PHOTOL[ 93]); // ISOPNB -> HC5 + NO2 + HO2
    RCONST[451] = (PHOTOL[ 22]); // Br2 -> 2Br
    RCONST[452] = (PHOTOL[ 27]); // BrO -> Br + O
    RCONST[453] = (PHOTOL[ 31]); // HOBr -> Br + OH
    RCONST[454] = (PHOTOL[ 28]); // BrNO3 -> Br + NO3
    RCONST[455] = (PHOTOL[ 29]); // BrNO3 -> BrO + NO2
    RCONST[456] = (PHOTOL[ 30]); // BrNO2 -> Br + NO2
    RCONST[457] = (PHOTOL[103]); // MPN -> CH2O + NO3 + HO2
    RCONST[458] = (PHOTOL[104]); // MPN -> MO2 + NO2
    RCONST[459] = (PHOTOL[ 94]); // ISOPND -> HC5 + NO2 + HO2
    RCONST[460] = (PHOTOL[ 95]); // PROPNN -> CH2O + NO2 + CO + MO2
    RCONST[461] = (PHOTOL[ 96]); // ATOOH -> OH + CH2O + MCO3
    RCONST[462] = (PHOTOL[ 35]); // N2O -> N2 + O1D
    RCONST[463] = (PHOTOL[ 99]); // SO4 -> SO2 + 2OH
    RCONST[464] = (PHOTOL[  5]); // NO -> O + N
    RCONST[465] = (PHOTOL[ 32]); // BrCl -> Br + Cl
    RCONST[466] = (PHOTOL[ 21]); // Cl2 -> 2Cl
    RCONST[467] = (PHOTOL[ 26]); // ClO -> Cl + O
    RCONST[468] = (PHOTOL[ 24]); // OClO -> ClO + O
    RCONST[469] = (PHOTOL[ 25]); // Cl2O2 -> Cl + ClOO
    RCONST[470] = (PHOTOL[ 20]); // ClNO2 -> Cl + NO2
    RCONST[471] = (PHOTOL[ 18]); // ClNO3 -> Cl + NO3
    RCONST[472] = (PHOTOL[ 19]); // ClNO3 -> ClO + NO2
    RCONST[473] = (PHOTOL[ 23]); // HOCl -> Cl + OH
    RCONST[474] = (PHOTOL[101]); // ClOO -> Cl + O2

}

/* End of Update_PHOTO function                                     */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
